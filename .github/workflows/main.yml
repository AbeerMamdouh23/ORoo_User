name: Selenium Daily Run

on:
  workflow_dispatch:  # Enables manual triggering of the workflow
  schedule:
    # Runs daily at 06:00 UTC
    - cron: '0 6 * * *'

jobs:
  selenium-test:
    runs-on: ubuntu-latest
    strategy: 
      matrix: 
        env_name: [DEV, STAGING, PRODUCTION] # Dynamically loop through environments
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Install Allure
      - name: Install Allure
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre
          curl -sLo allure.tgz https://github.com/allure-framework/allure2/releases/download/2.32.0/allure-2.32.0.tgz
          tar -xzvf allure.tgz -C /opt/
          sudo ln -sf /opt/allure-2.32.0/bin/allure /usr/local/bin/allure
          echo "Verifying Allure installation..."
          /usr/local/bin/allure --version
      # Run Selenium tests 
      - name: Run tests for ${{ matrix.env_name }} 
        env: 
          TEST_ENV: ${{ matrix.env_name }} # Set environment dynamically 
        run: | 
          echo "Running tests in $TEST_ENV" 
          # Change the base URL dynamically 
          if [ "$TEST_ENV" == "DEV" ]; then 
            export BASE_URL="https://user.dev-ooro.co.uk/" 
          elif [ "$TEST_ENV" == "STAGING" ]; then 
              export BASE_URL="https://user.staging-ooro.co.uk" 
          elif [ "$TEST_ENV" == "PRODUCTION" ]; then 
            export BASE_URL="https://user.ooro.co.uk" 
          fi 
          
          echo "Using BASE_URL: $BASE_URL" 
          # Pass the base URL to the test script 
          pytest tests/ --junitxml="results_${TEST_ENV}.xml" || true    
        continue-on-error: true
          
      # Generate Allure report for the respective environment
      - name: Generate Allure Report for ${{ matrix.environment }}
        run: |
         allure generate test-output/allure-results -o test-output/allure-report-${{ matrix.environment }} --single-file --clean

      # Upload Allure report artifacts for the respective environment
      - name: Upload Allure report artifacts for ${{ matrix.environment }}
        uses: actions/upload-artifact@v3
        with:
           name: allure-report-${{ matrix.environment }}
           path: test-output/allure-report-${{ matrix.environment }}

    # Check if the Allure report exists
      - name: Check Allure report existence for ${{ matrix.environment }}
        run: |
           if [ -f test-output/allure-report-${{ matrix.environment }}/index.html ]; then
             echo "Allure report for ${{ matrix.environment }} exists"
           else
             echo "Allure report for ${{ matrix.environment }} not found!" && exit 1
           fi

    # Send the Allure report to Slack
      - name: Send Allure report to Slack for ${{ matrix.environment }}
        uses: MeilCli/slack-upload-file@v4
        with:
           slack_token: ${{ secrets.SLACK_BOT_TOKEN }}
           channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
           file_type: 'html'
           file_path: 'test-output/allure-report-${{ matrix.environment }}/index.html'
           file_name: 'index.html'
           initial_comment: "Automation Testing Status for ${{ matrix.environment }}"
